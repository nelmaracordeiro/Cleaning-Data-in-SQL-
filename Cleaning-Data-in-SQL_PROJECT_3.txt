---Cleaning Data in SQL Queries---
---Selecting the data to work with---

SELECT*
FROM dbo.HousingData


--- Standardize Date Format---

ALTER TABLE dbo.HousingData
ADD SaleDateConverted Date;

UPDATE dbo.HousingData
SET SaleDateConverted=CONVERT(Date,SaleDate)


--- Populate Property Address data---

SELECT *
FROM dbo.HousingData
ORDER BY ParcelID

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
FROM dbo.HousingData a
JOIN dbo.HousingData b
  ON a.ParcelID=b.ParcelID
  AND a.[UniqueID ]<> b.[UniqueID ]

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
FROM dbo.HousingData a
JOIN dbo.HousingData b
  ON a.ParcelID=b.ParcelID
  AND a.[UniqueID ]<> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM dbo.HousingData a
JOIN dbo.HousingData b
  ON a.ParcelID=b.ParcelID
  AND a.[UniqueID ]<> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL

UPDATE a
SET Propertyaddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM dbo.HousingData a
JOIN dbo.HousingData b
  ON a.ParcelID=b.ParcelID
  AND a.[UniqueID ]<> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL


---Separating the address into individual columns (address, city, state)---

SELECT PropertyAddress
FROM dbo.HousingData 

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address,
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address
FROM dbo.HousingData 

ALTER TABLE dbo.HousingData
ADD PropertyStreet Nvarchar(255);

UPDATE dbo.HousingData
SET PropertyStreet = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE dbo.HousingData
ADD PropertyCity Nvarchar(255);

UPDATE dbo.HousingData
SET PropertyCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))

SELECT *
FROM dbo.HousingData 



SELECT OwnerAddress
FROM dbo.HousingData 

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3),
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
FROM dbo.HousingData 

ALTER TABLE dbo.HousingData 
ADD OwnerStreet Nvarchar(255);

UPDATE dbo.HousingData 
SET OwnerStreet = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)

ALTER TABLE dbo.HousingData 
ADD OwnerCity Nvarchar(255);

UPDATE dbo.HousingData 
SET OwnerCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)

ALTER TABLE dbo.HousingData 
ADD OwnerState Nvarchar(255);

UPDATE dbo.HousingData 
SET OwnerState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)

SELECT *
FROM dbo.HousingData 


-- Changing Y and N to Yes and No in "Sold as Vacant" field

SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM dbo.HousingData
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant,
 CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM dbo.HousingData

UPDATE dbo.HousingData
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END


-- Removing Duplicates

WITH RowNumCTE AS 
(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num
FROM dbo.HousingData
)
DELETE
FROM RowNumCTE
WHERE row_num > 1


-- Deleting Unused Columns

SELECT *
FROM dbo.HousingData


ALTER TABLE dbo.HousingData
DROP COLUMN OwnerAddress, PropertyAddress

ALTER TABLE dbo.HousingData
DROP COLUMN SaleDate

